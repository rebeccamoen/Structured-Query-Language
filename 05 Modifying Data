-- Modifying Data
 -- Insert data: You use the INSERT statement to insert data into a table
 CREATE TABLE SalesLT.CallLog -- Creates a new table named SalesLT.CallLog
 (
     CallID int IDENTITY PRIMARY KEY NOT NULL, -- The CallID column is an identity column that is automatically incremented (so the first row has the value 1)
     CallTime datetime NOT NULL DEFAULT GETDATE(), -- If DEFAULT it gets the present time
     SalesPerson nvarchar(256) NOT NULL,
     CustomerID int NOT NULL REFERENCES SalesLT.Customer(CustomerID),
     PhoneNumber nvarchar(25) NOT NULL,
     Notes nvarchar(max) NULL
 );

 SELECT * FROM SalesLT.CallLog;

 INSERT INTO SalesLT.CallLog
 VALUES ('2015-01-01T12:30:00', 'adventure-works\pamela0', 1, '245-555-0173', 'Returning call re: enquiry about delivery');

 INSERT INTO SalesLT.CallLog
 VALUES (DEFAULT, 'adventure-works\david8', 2, '170-555-0127', NULL);

 INSERT INTO SalesLT.CallLog (SalesPerson, CustomerID, PhoneNumber) -- Explicitly lists the columns into which the new values will be inserted
 VALUES ('adventure-works\jillian0', 3, '279-555-0130'); -- The columns not specified in the statement support either default or NULL values

 -- Inserts two rows of data into the table:
 INSERT INTO SalesLT.CallLog
 VALUES 
 (DATEADD(mi,-2, GETDATE()), 'adventure-works\jillian0', 4, '710-555-0173', NULL), -- mi,-2 = subtract two minutes from the present time
 (DEFAULT, 'adventure-works\shu0', 5, '828-555-0186', 'Called to arrange deliver of order 10987');

 INSERT INTO SalesLT.CallLog (SalesPerson, CustomerID, PhoneNumber, Notes)
 SELECT SalesPerson, CustomerID, Phone, 'Sales promotion call'
 FROM SalesLT.Customer
 WHERE CompanyName = 'Big-Time Bike Store';

 INSERT INTO SalesLT.CallLog (SalesPerson, CustomerID, PhoneNumber)
 VALUES
 ('adventure-works\josé1', 10, '150-555-0127');

 SELECT SCOPE_IDENTITY() AS LatestIdentityInDB, -- The SCOPE_IDENTITY function to retrieve the most recent identity value that has been assigned in the database (to any table)
       IDENT_CURRENT('SalesLT.CallLog') AS LatestCallID; -- The IDENT_CURRENT function retrieves the latest identity value in the specified table

 -- Enables explicit insertion of identity values and inserts a new row with a specified CallID value, before disabling explicit identity insertion again:
 SET IDENTITY_INSERT SalesLT.CallLog ON;
 INSERT INTO SalesLT.CallLog (CallID, SalesPerson, CustomerID, PhoneNumber)
 VALUES
 (20, 'adventure-works\josé1', 11, '926-555-0159');
 SET IDENTITY_INSERT SalesLT.CallLog OFF;

 SELECT * FROM SalesLT.CallLog;

 -- Update data: To modify existing rows in a table, use the UPDATE statement
 UPDATE SalesLT.CallLog
 SET Notes = 'No notes'
 WHERE Notes IS NULL;

 UPDATE SalesLT.CallLog
 SET SalesPerson = '', PhoneNumber = '' -- All rows have been updated to remove the SalesPerson and PhoneNumber fields - this emphasizes the danger of accidentally omitting a WHERE clause in an UPDATE statement

 UPDATE SalesLT.CallLog
 SET SalesPerson = c.SalesPerson, PhoneNumber = c.Phone
 FROM SalesLT.Customer AS c
 WHERE c.CustomerID = SalesLT.CallLog.CustomerID;

 -- Delete data: To delete rows in the table, you generally use the DELETE statement; though you can also remove all rows from a table by using the TRUNCATE TABLE statement
 DELETE FROM SalesLT.CallLog
 WHERE CallTime < DATEADD(dd, -7, GETDATE()); -- Rows with a CallDate older than 7 days gets deleted

 TRUNCATE TABLE SalesLT.CallLog; -- The TRUNCATE TABLE statement remove all rows in the table

 -- Challenge 1: Insert products
 -- Insert a product:
 INSERT INTO SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, ProductCategoryID, SellStartDate)
 VALUES ('LED Lights', 'LT-L123', 2.56, 12.99, 37, GETDATE());

 SELECT SCOPE_IDENTITY();
 SELECT * FROM SalesLT.Product WHERE ProductID = 1000; -- Alternative method: WHERE ProductID = SCOPE_IDENTITY();

 -- Insert a new category with two products:
 INSERT INTO SalesLT.ProductCategory (ParentProductCategoryID, Name) -- Add new Parent Category for the new Accessories (4) category
 VALUES (4, 'Bells and Horns');

 INSERT INTO SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, ProductCategoryID, SellStartDate)
 VALUES -- Insert the two new products with the appropriate ProductCategoryID value
 ('Bicycle Bell', 'BB-RING', 2.47, 4.99, IDENT_CURRENT('SalesLT.ProductCategory'), GETDATE()),
 ('Bicycle Horn', 'BB-PARP', 1.29, 3.75, IDENT_CURRENT('SalesLT.ProductCategory'), GETDATE());

 SELECT c.Name As Category, p.Name AS Product
 FROM SalesLT.Product AS p
 JOIN SalesLT.ProductCategory as c
     ON p.ProductCategoryID = c.ProductCategoryID
 WHERE p.ProductCategoryID = IDENT_CURRENT('SalesLT.ProductCategory'); -- Verify that the data has been inserted

 -- Challenge 2: Update products
 -- Update product prices:
 SELECT * 
 FROM SalesLT.Product AS P
 JOIN SalesLT.ProductCategory AS C
    ON P.ProductCategoryID = C.ProductCategoryID
 WHERE C.Name = 'Bells and Horns';

 UPDATE SalesLT.Product
 SET ListPrice = ListPrice * 1.1 -- 10% price increase for all products in the Bells and Horns category
 WHERE ProductCategoryID = 42; 

 -- Discontinue products:
 SELECT DISTINCT * FROM SalesLT.ProductCategory;

 UPDATE SalesLT.Product
 SET DiscontinuedDate = GETDATE()
 WHERE ProductCategoryID = 37
 AND ProductNumber <> 'LT-L123';
 
 -- Challenge 3: Delete products
 -- Delete a product category and its products:
 DELETE FROM SalesLT.Product
 WHERE ProductCategoryID = 42;

 DELETE FROM SalesLT.ProductCategory
 WHERE ProductCategoryID = 42;

 -- Alternative method:
 DELETE FROM SalesLT.Product
 WHERE ProductCategoryID =
     (SELECT ProductCategoryID
      FROM SalesLT.ProductCategory
      WHERE Name = 'Bells and Horns');

 DELETE FROM SalesLT.ProductCategory
 WHERE ProductCategoryID =
     (SELECT ProductCategoryID
      FROM SalesLT.ProductCategory
      WHERE Name = 'Bells and Horns');
